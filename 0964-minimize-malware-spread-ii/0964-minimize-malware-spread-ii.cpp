class Solution {
public:
int n;
    pair<bool,int> dfs(int s,vector<vector<int>>& g,vector<bool> &vis,map<int,int> &mp,int &sp){
        vis[s]=true;
        if(mp.find(s)!=mp.end())
        {
            return {false,0};
        }
        sp=0;
        int ans=1;
        bool kk=true;
        for(int i=0;i<n;i++)
        {
            if(g[s][i]==1&&!vis[i])
            {
                auto z=dfs(i,g,vis,mp,sp);
                if(z.first==true)
                {
                    ans+=z.second;
                }
                else{
                    kk=false;
                }
            }
        }
        return {kk,ans};
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        n=graph.size();
        vector<bool> vis(n,false);
        map<int,int> mp;
        int c=-1;
        int ans=-1;
        int q=initial.size();
        for(int i=0;i<q;i++)
        {
            mp[initial[i]]=1;
        }
        sort(initial.begin(),initial.end());
        for(auto i:initial){
            cout<<i<<" ";
            vector<bool> vis(n,false);
            int sp=-1;
            vis[i]=true;
            int z=0;
            for(int j=0;j<n;j++)
            {
                if(graph[i][j]==1&&!vis[j]&&i!=j)
                {
                    auto k=dfs(j,graph,vis,mp,sp);
    
                    if(k.first==true)
                    {
                        z+=k.second;
                    }
                }
            }
            cout<<z<<endl;
            if(c<z)
            {
                c=z;
                ans=i;
                   
            }
        }
         
        return ans;   
    }
};